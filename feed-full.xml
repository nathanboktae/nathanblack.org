<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://nathanblack.org</id>
    <title>Nathan Black&apos;s Blog</title>
    <updated>2017-10-08T00:00:00Z</updated>
    <link rel="alternate" href="http://nathanblack.org"/>
    <logo>http://nathanblack.org/favicon.png</logo>
    <generator>Feed for Node.js</generator>
    <entry>
        <title type="html"><![CDATA[CSS in JavaScript is a horrible idea]]></title>
        <id>http://nathanblack.org/post/css-in-js-is-a-horrible-idea</id>
        <link href="http://nathanblack.org/post/css-in-js-is-a-horrible-idea">
        </link>
        <updated>2017-10-08T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>There is a lot of buzz around CSS in JS these days as Facebook champions it for React. There are some fundamental problems with this I would like to address.</p>
<p>Why were cascading style sheets created? Before them, all styles were inline. Remember when we had to write <code>&lt;table bgcolor=&quot;#ffde09&quot;&gt;...</code> and such? What happened when you wanted to change all your text colors? You had to find all the references manually and change them! A global file search and replace wasn&#39;t good enough as maybe this black was for a border instead of text... it was a nightmare.</p>
<p>Enter CSS. Now you could declare your text, fonts, margins and borders with a default global setting, and override them in specific circumstances as needed. <em>It&#39;s about design, not code</em>.</p>
<h3 id="design-and-users-love-consistency">Design and Users love consistency</h3>
<p>Good UX and design love consistency. Users get confused if a primary CTA button looks different on this page or component. Globals are good in design. They are not in code.</p>
<h3 id="styling-and-functionality-are-separate-concerns">Styling and functionality are separate concerns</h3>
<p>How a page or component looks and operates is wholly separate from how it functions. Your table grid shouldn&#39;t care about the font face, background, or cell spacing it has. It should care about how it wires up data and renders the contents, and providing a useful API. With clean, sematic HTML the user&#39;s existing design will simply <em>cascade</em> and inherit styles.</p>
<h3 id="css-is-a-layout-rules-engine-not-code">CSS is a layout rules engine, not code</h3>
<p>Many of the good software design principles don&#39;t apply to CSS because it&#39;s not code, but a layout engine. With a good DSL (see the next point) you can blend extra principles like composibility and refactoring in, but there is no high order functions, dependecy injection, visitor pattern, etc stuff to apply.</p>
<h3 id="mature-css-processors-have-been-addressing-limitations-in-css-for-years">Mature CSS Processors have been addressing limitations in CSS for years</h3>
<p>We&#39;ve had many successful years of using SASS, LESS, Stylus, and the new kid PostCSS. These great robust DSLs have many features and plugins to address whatever need the CSS-in-JS community thinks can&#39;t be solved. Let&#39;s <a href="https://speakerdeck.com/vjeux/react-css-in-js">go through them</a></p>
<ol>
<li><em>Global Namespace</em> I addressed why this is good for design and UX previously.</li>
<li><em>Dependencies</em>. Webpack users have been able to <code>require()</code> CSS dependencies and <a href="https://webpack.github.io/docs/stylesheets.html">bundle them together</a> for a long time.</li>
<li><em>Dead Code Elimination</em> Webpack 2+ <a href="https://webpack.js.org/guides/tree-shaking/">supports tree shaking</a> to elmitate dead CSS dependencies at the component level. Andy Osami shows how you can <a href="https://addyosmani.com/blog/removing-unused-css/">remove unused rules and add it to you build system</a>. The Chrome dev tools feature an <a href="http://meeech.amihod.com/very-useful-find-unused-css-rules-with-google/">Audit tab</a> that can reveal unused rules.</li>
<li><em>Minification</em> <a href="https://github.com/yui/yuicompressor">YUI compressor</a> has been around for years. Combined with gzip, HTTP2, and CDN caching, this is no reason at all to flip the table on everything. Performance is an ongoing arms race that <a href="http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html">react is already loosing</a>.</li>
<li><em>Sharing Constants</em> I&#39;ve always created a <code>definitions.styl</code> that contained all my variables and mixins, and included it at every script. Very trivial.</li>
<li><em>Non-deterministic Resolution</em> Pure FUD. CSS Specificity is very deterministic. A great analogy to learn this was to <a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/">compare it to poker</a>.</li>
<li><em>Isolation</em>. You can organize your stylesheets however you like and use <code>import</code> in CSS and <code>require()</code> from JavaScript via Webpack / browserify. Also putitng styling concerns in JavaScript creates higher coupling and <em>reduces</em> isolation.</li>
</ol>
<h3 id="fighting-against-web-standards-is-a-loosing-battle">Fighting against web standards is a loosing battle</h3>
<p>JavaScript frameworks come and go. CSS has been a standard since the dawn of the century. Want to integrate with that <a href="https://dbushell.com/Pikaday/">great datepicker written in plain JavaScript</a>? Well it uses classes (that you can read!) so you need CSS. Psuedoelements, psuedoclasses, CSS variables, and animations all require stylesheets.</p>
<h3 id="you-still-need-to-learn-css">You still need to learn CSS</h3>
<blockquote>
<p>When I&#39;m saying at scale, it means a codebase with hundreds of developers comming code everyday where most of them are not front-end developers</p>
</blockquote>
<p>There in lies your problem. It&#39;s a human and cultural problem you&#39;re trying to solve with technology. The nature of the web and browser, learning good UX patterns, learning how to layout a page and have it be responsive to dynamic content and varying screen sizes, to reconsicle a stateful UI running in an untrusted context with a stateless server API that runs in a trusted context, security attacks, expressing a design language in a semantic way that&#39;s maintainable, etc, etc, is not something that simply goes away. It must be learned to create amazing web experiences and iterate fast on them.</p>
<p>If you care about good a user experience, separation of concerns, and having a maintainable code base aligned with web standards, please, keep your styling in CSS.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Don't Mock Your Code - The Behavior is the Unit]]></title>
        <id>http://nathanblack.org/post/dont-mock-your-code-the-behavior-is-the-unit</id>
        <link href="http://nathanblack.org/post/dont-mock-your-code-the-behavior-is-the-unit">
        </link>
        <updated>2017-01-30T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>I first started really utilizing unit testing and test-driven development while on the <a href="http://web.archive.org/web/20120205035354/https://datamarket.azure.com/">DataMarket</a> team at Microsoft was slowing migrating an ASP.NET WebForms app to MVC. In a team that had no tests maintained by developers (<em>shudder</em> how did we develop software this long?) it was a big cultural change led by my great colleages <a href="https://github.com/jonsequitur">Jon Sequiera</a> and <a href="https://www.linkedin.com/in/dfrenkel">Dmitry Frenkel</a>, who I am very greatful to have the experience of working with.</p>
<p>At the time we&#39;d write tests for our controllers. We&#39;d mock out all the dependencies it would need in a test and provide them. We were also using the <a href="">repository pattern</a> and testing the controller we&#39;d mock that out. The repository pattern was really needed as we couldn&#39;t actually make a call to the database due to a lot of different reasons that basically stem from a monolithic ball of sphagetti code and abomination that was <a href="http://www.ben-morris.com/entity-framework-anti-patterns-how-not-to-use-an-orm-with-sql-server/">Entity Framework 1.0</a>.</p>
<p>That was nice to get developers used to writing tests for their code, but there was a lot of problems with that. Views were not tested at all, due to Razor being untestable at the time (some 32bit vs 64bit issue on the build server or something, see previous comment on monolithic ball of sphagetti). We had bugs in our view not being rendered. Razor was also very logic heavy, and a few abominations were created. Writing new tests required about 3x the mocking code than code that actually did the assertions. Model binding had no tests - you&#39;d know about it 3 days later (maybe) when a tester ran their test suite, or worse, your manager was trying something on the development environment. Forgot a dependency injection registration that you mocked out? App won&#39;t boot at all despite your tests passing. Moreover, when I want to refactor code to move more logic into the controller from the repository that had to much (that had no tests on it), I have to refactor a whole quite of tests. How can we rely on these tests when it still has these huge gaps and maintence problems?</p>
<p>A new approach and that can be referred to behavior-driven development or black box testing is testing the functionality or contracts of the service or app. Essentially all the code that is in that git repo, test that it&#39;s contracts with things outside of it (users, other services it depends on or the API service it has), test those behaviors without mocking any code inside that repository, only other services / interfaces that it depends on (An AWS service, browser ajax calls, etc.) If possible avoid those too - for example, don&#39;t mock your database or Redis - run the server locally, bootstrap it, run the real migrations or whatever, and run your tests.</p>
<p><a href="https://github.com/visionmedia/supertest">supertest</a> and <a href="http://www.davidwhitney.co.uk/Blog/2015/01/07/testing-an-asp-net-webapi-app-in-memory/">ASP.NET WebApi</a> are great in doing this sort of testing for an API server. Start your app, build a request, and assert the response. Make a few calls in a test or nest tests for testing a complicated scenario.</p>
<pre><code class="lang-javascript">const app = require(&#39;../app&#39;),
      supertest = require(&#39;co-supertest&#39;)(app.listen() /* koa app */)

describe(&#39;Logging in&#39;, function() {
  it(&#39;should return 401 given invalid credentials&#39;, function() {
    return supertest(app)
      .post(&#39;/users&#39;)
      .send({
        email: &#39;bob@gmail.com&#39;,
        password: &#39;1234&#39;
      })
      .set(&#39;Accept&#39;, &#39;application/json&#39;)
      .expect(401)
      .expect({
        message: &#39;Invalid Credentials&#39;
      })
      .end()
  })
})
</code></pre>
<p>How simple is that? Of course before this, test data is seeded into the database, and depedant services that are not mocked are started and seeded, like a local redis instance, or a test SQS topic.</p>
<p>What about client code? Opening and closing a browser for every test is not practical. For the rewrite of the portal at Appuri, I had our test bootstrap the entire application and mount it in a <code>div</code> that is not mounted in the DOM by default. Not mounting it in the DOM makes it faster, and also will fail any code that does a global selector (<code>document.body.querySelector[All]</code>), which is very nice. After the test is done, the div is thrown away. Every test instance gets a new appilcation instance and new DOM root for isolation. It&#39;s more heavy weight than unit tests of course, but much less than a Selenium or even a <a href="https://github.com/nathanboktae/mocha-casperjs">mocha-casperjs</a> test.</p>
<p>After using this approach for a year, and getting two other developers up to speed on it, I&#39;m very happy with the results. Functional regressions are extremely rare, and usually due to a missing test or test bug, which is fixed along with the bug fix!</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migration to a static site: Experience with Metalsmith vs Gulp]]></title>
        <id>http://nathanblack.org/post/migration-to-static-site-via-gulp</id>
        <link href="http://nathanblack.org/post/migration-to-static-site-via-gulp">
        </link>
        <updated>2017-01-29T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>I <a href="/post/the-beginning">started this site</a> using <a href="http://jsantell.github.io/poet/">poet</a> on top of <a href="http://nodejs.org/">node.js</a> and <a href="http://expressjs.com/">express</a>, mainly wanting to expand my node skills and use my free Azure credits I got as a Microsoft employee. Azure Websites, the Heroku-like PaaS had just launched (now called <a href="https://azure.microsoft.com/en-us/services/app-service/">App Services</a>). It was a nice experience.</p>
<p>Later on while working at <a href="https://www.crunchbase.com/organization/appuri#/entity">Appuri</a>, we decided to move our public website off of Hubspot as it was a nightmare for our talented designer, <a href="https://www.linkedin.com/in/jeffreynoldz">Jeff Reynolds</a>, who knew HTML and CSS, to work in. It would need marketing functionality, but we took the approach that whatever we needed could be provided via a 3rd party JavaScript tag on the client. So we didn&#39;t need a server at all. We could simply serve it from an <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">S3 bucket</a> cheaply and it will always be up. <a href="https://circleci.com">Circle CI</a> would build the site and sync the bucket.</p>
<p>So how to build it? I initially looked at <a href="http://www.metalsmith.io/">Metalsmith</a> that was focused on building these sites, that had all the speciallized packages needed like <a href="https://github.com/segmentio/metalsmith-permalinks">metalsmith-permalinks</a>, <a href="https://www.npmjs.com/package/metalsmith-feed-atom">metalsmith-feed-atom</a>, etc. and YAML front matter as a first class citizen. But I had issues:</p>
<ul>
<li><p>Metalsmith processes all files together, unlike gulp which streams files. A lot of work on static sites requires an aggregate functionality (reorder posts by publish date, count blog entries by tag, build a sitemap, etc.) But you can always go to aggregates from a stream - you can&#39;t stream after you&#39;ve sucked in the whole world. This mainly breaks the <a href="">browser-sync</a> flow where CSS changes could be injected without a page refresh. Instead the whole world runs again. This is a huge dealbeaker and what caused me to switch to gulp.</p>
</li>
<li><p>Gulp has all those plugins for a static site, and more. <a href="https://www.npmjs.com/package/gulp-markdown-to-json">gulp-markdown-to-json</a> for transforming markdown with yaml front-matter, <a href="https://www.npmjs.com/package/gulp-pretty-url">gulp-pretty-url</a> for permalinks (or see below for my 6-liner using <a href="https://www.npmjs.com/package/gulp-rename">gulp-rename</a>), and all the other standard CSS and asset processing packages you would expect. Metalsmith is lacking in this respect (thus <a href="https://www.npmjs.com/package/gulpsmith">gulpsmith</a> exists)</p>
</li>
</ul>
<pre><code class="lang-javascript">const permalink = () =&gt; rename(function(file) {
  if (file.extname === &#39;.html&#39; &amp;&amp; file.basename !== &#39;index&#39;) {
    file.dirname = path.join(file.dirname, file.basename)
    file.basename = &#39;index&#39;
  }
  return file
})
</code></pre>
<ul>
<li>No concepts of tasks. Just want to re-optomize those SVGs? Build the whole world again!</li>
</ul>
<p>So I realized that Metalsmith was just a poor gulp implementation, and redid it with gulp packages and some simple custom tasks around other core packages (e.g. used <a href="https://www.npmjs.com/package/feed">feed</a> directly instead of <code>gulp-rss</code>). This method has been working really well at Appuri, so I did it here too, using <a href="https://pages.github.com/">GitHub pages</a>.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Semantic Web Component Design: Radios, dropdowns, and tabs are the same thing]]></title>
        <id>http://nathanblack.org/post/semantic-web-component-design-dropdowns-tabs-radios-are-the-same-thing</id>
        <link href="http://nathanblack.org/post/semantic-web-component-design-dropdowns-tabs-radios-are-the-same-thing">
        </link>
        <updated>2016-12-10T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>Early on in the rewrite of <a href="https://www.appuri.com/">Appuri&#39;s</a> portal that we started on after having a designer and development team from the MVP, and in our transition from Angular to Knockout, I was looking around at different widget / web component libraries and what I could leverage that would fit the designer&#39;s use cases and style, as well as a clean design.</p>
<p>One thing that always drove me nuts about our previous UI was a mismash of different components doing the same thing. We had <a href="https://github.com/angular-ui/ui-select2">ui-select2</a>, <a href="http://angular-ui.github.io/ui-select/">ui-select</a> from the Angular UI team, <a href="https://github.com/isteven/angular-multi-select">angular-multi-select</a> for some multiselect cases, and a custom directive for radio-like toggle boxes.</p>
<p>Each control offered some little feature that another didn&#39;t (except <code>ui-select2</code> which was just in code we didn&#39;t get around to refactoring yet). Why is this? All of them are trying to do the same thing on a higher semantic level: The user needs to pick an one (or more) options from this fixed set of options. How that looks is a styling concern.
<!--more--></p>
<p>Between those design goals and a darth of knockout components, I created <a href="https://github.com/nathanboktae/knockout-choose">knockout-choose</a>. Some goals included:</p>
<ul>
<li><em>Modern Web Component design</em> using custom tags so that markup stayed in markup.</li>
<li><em>Semantic markup and API</em> so that any &quot;choose one or more from many&quot; scenario could be addressed.</li>
<li><em>Well tested with hosted CI</em> as how can you ask someone to take a production dependency on your component without them?</li>
</ul>
<p>At the bottom of the <a href="https://nathanboktae.github.io/knockout-choose">knockout-choose demo page</a> is the example of one chooser changing the styling of the other by simply applying a different class. To be even more semantic, you could put these rules in a mixin in your CSS preprocessor. Now if the design changes, your code and tests stay the same! Hooray for separation of concerns!</p>
<p>I hope that others design components along semantic usage so they are easy and flexible to use, regardless of framework, if any. <a href="http://dbushell.github.io/Pikaday/">Pikaday</a> is a great example of this and a great date picker - I highly recommend.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A fast and robust way to run Sauce Labs tests in Circle CI]]></title>
        <id>http://nathanblack.org/post/robustly-running-sauce-lab-test-in-circle-ci</id>
        <link href="http://nathanblack.org/post/robustly-running-sauce-lab-test-in-circle-ci">
        </link>
        <updated>2015-09-17T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>We&#39;ve been using <a href="https://circleci.com">Circle CI</a> at <a href="http://www.appuri.com">Appuri</a> for many months now and have been very happy with it. It&#39;s very simple and has a great breadth of features, namely the ability to SSH into a build to diagnose it when things get really tricky, as well as docker build services, slack integration, and lots of built-in services. After I hit a wall with <a href="http://phantomjs.org">PhantomJS</a>, and needing to run our tests on multiple browsers anyways, it was time to integrate <a href="">Sauce Labs</a> to do our browser testing, which I&#39;ve had great experience with on <a href="https://github.com/nathanboktae/cherrytree-for-knockout">many</a> <a href="https://github.com/nathanboktae/frypan-knockout-grid">open source</a> <a href="https://github.com/nathanboktae/knockout-choose">projects</a>. In those projects I used <a href="https://github.com/axemclion/grunt-saucelabs">grunt-saucelabs</a> as I am not a big fan of Karma as I like to control the HTML page the tests run on as well as the simplicity of <a href="https://github.com/nathanboktae/mocha-phantomjs">mocha-phantomjs</a> and just refreshing a flat file or using <a href="http://www.browsersync.io/">browser sync</a>.</p>
<p>However we&#39;re using <a href="http://gulpjs.com/">gulp</a> and I didn&#39;t want to pull in <a href="http://gruntjs.com/">grunt</a> and have two build systems. Unfortunately there&#39;s no <code>gulp-saucelabs</code>, which I contemplated doing (I may sometime), but I found I could simply use <a href="https://github.com/nathanboktae/mocha-cloud">mocha-cloud</a>. However, it didn&#39;t bring up the tunnel.</p>
<!--more-->
<p>Circle has some <a href="https://circleci.com/docs/browser-testing-with-sauce-labs">brief documentation</a> on how to connect the tunnel - they don&#39;t include <a href="http://saucelabs.com/connect">Sauce Connect</a> so you have to <code>wget</code> it yourself every time. No problem. However looking at the test section:</p>
<pre><code>test:
  override:
    - cd sc-*-linux &amp;&amp; ./bin/sc -u $SAUCE_USERNAME -k $SAUCE_ACCESS_KEY:
        background: true
    - python -m hello.hello_app:
        background: true
    - sleep 60
    - nosetests
</code></pre><p>Whoa did you see that? A one minute sleep! Yikes! The sauce labs tunnel does take some time to setup, usually 20-30 seconds in my experience. Random sleeps are the worst for stable builds.... There must be a better way, and there is.</p>
<p>First off, even though they recommend getting the binary in the post dependencies section, they don&#39;t start the tunnel right away, even though it&#39;s running in the background. Start that sucker ASAP!</p>
<pre><code class="lang-yaml">dependencies:
  pre:
    - wget https://saucelabs.com/downloads/sc-latest-linux.tar.gz
    - tar -xzf sc-latest-linux.tar.gz
    - cd sc-*-linux &amp;&amp; ./bin/sc:
        background: true
</code></pre>
<p>Now the tunnel is connecting while you fetch your code from github and pull down your npm, python, go, whatever dependant packages. </p>
<p>When creating the tunnel, they say to wait for &quot;you may start your tests&quot; before starting tests. We could tail the output and check for that string, but I noticed something right before it</p>
<pre><code>17 Sep 21:59:44 - Starting up; pid 7002
17 Sep 21:59:44 - Command line arguments: sc
17 Sep 21:59:44 - Using no proxy for connecting to Sauce Labs REST API.
17 Sep 21:59:44 - Resolving saucelabs.com to 162.222.73.28 took 37 ms.
17 Sep 21:59:44 - Started scproxy on port 59124.
17 Sep 21:59:44 - Please wait for &#39;you may start your tests&#39; to start your tests.
17 Sep 21:59:44 - Starting secure remote tunnel VM...
17 Sep 21:59:52 - Secure remote tunnel VM provisioned.
17 Sep 21:59:52 - Tunnel ID: xxxxxxx
17 Sep 21:59:53 - Secure remote tunnel VM is now: booting
17 Sep 21:59:58 - Secure remote tunnel VM is now: running
17 Sep 21:59:58 - Remote tunnel host is: makiXXXXX.miso.saucelabs.com
17 Sep 21:59:58 - Using no proxy for connecting to tunnel VM.
17 Sep 21:59:58 - Resolving makiXXXXX.miso.saucelabs.com to 162.222.77.201 took 53 ms.
17 Sep 21:59:58 - Starting Selenium listener...
17 Sep 21:59:58 - Establishing secure TLS connection to tunnel...
17 Sep 21:59:58 - Selenium listener started on port 4445.
17 Sep 21:59:59 - Sauce Connect is up, you may start your tests.
</code></pre><p>It listens to port <code>4445</code> right before you can start the tests. Turns out we can poll for that port being listened on, then we start our tests!</p>
<pre><code class="lang-yaml">dependencies:
  pre:
    - wget https://saucelabs.com/downloads/sc-latest-linux.tar.gz
    - tar -xzf sc-latest-linux.tar.gz
    - cd sc-*-linux &amp;&amp; ./bin/sc:
        background: true

test:
  pre:
    - &quot;while ! lsof -i:4445 -t; do sleep 3; done&quot;
</code></pre>
<p>A reliable build that doesn&#39;t have a dead one minute wait.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[jspm and systemjs: High friction package managment]]></title>
        <id>http://nathanblack.org/post/jspm-high-friction-package-management-avoid</id>
        <link href="http://nathanblack.org/post/jspm-high-friction-package-management-avoid">
        </link>
        <updated>2015-07-11T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>We have a decent-sized Angular codebase here at <a href="http://www.appuri.com/">Appuri</a> that I want to replace with real module system that will allow for a gradual move away from Angular. A friend recently pointed me to <a href="http://jspm.io/">jspm</a> and <a href="https://github.com/systemjs/systemjs">systemjs</a>. The goal and direction is sound - load any module format (AMD, CommonJS, Harmony/ES6) and be registry-agnostic (npm or GitHub is out of the box with registry plugins, namely for bower). Unlike bower, since the loader and the package manager work together, it maintains the mapping of modules that normally you do manually in <a href="http://requirejs.org/docs/api.html#config">the <code>map</code> and <code>paths</code> sections of your RequireJS main</a>. It also has a builder, so you can work in a mode that loads files individually, or bundle them up together for production, with source maps and minifcation. It also supports ES6 compiling to ES5 (or &quot;transpiling&quot; <a href="https://twitter.com/mraleph/status/471756991527124993">if you don&#39;t fully understand what compiling is</a>), so it is very future-standards focused. It&#39;s a superset of what I want from RequireJS, so I was excited and dove in.</p>
<p>Three days in, I&#39;m ready to throw in the towel as <a href="https://github.com/systemjs/builder/issues/223">I can&#39;t get SystemJS builder to work</a>. There are bigger issues too.</p>
<ol>
<li><h2 id="bower-should-be-a-first-class-registry">Bower should be a first class registry</h2>
<p>So jspm is registry agnostic, and it&#39;s registry providers built in are npm and GitHub. Why a GitHub provder instead of bower? It&#39;s so similar to bower, yet lacking too. They are both git based (well except these muts be in GitHub, damn your priviate or alternate git repo). It also ignores dependencies in the bower.json - which basically defeats the purpose of the package manager as you are now left to dealing with the dependecies yourself, manually editing your <code>config.js</code> - the thing that it&#39;s supposed to manage for you.</p>
<p>I started out simply using <code>jspm install angular</code>. Worked fine. Then trying to install angular plugins, they weren&#39;t in the registry. so I did them mangually via <code>jspm install github:somedude/angular-plugin</code>. However they would often just have a bower.json, so the dependency on angular wasn&#39;t declared. It was worse as I did <code>angular-chart</code>, which depends on <code>c3</code>, which then depends on <code>d3</code>.</p>
<p>Ugh. So I install <a href="https://www.npmjs.com/package/jspm-bower-endpoint">jspm-bower-endpoint</a> and run <code>jspm install bower:angular-chart</code>. cool.... wait, it depends on <code>bower:angular</code>, but I already have <code>github:angular</code> installed from the jspm registry... Ugh. <code>jspm uninstall</code> ALL the jspm packages and just use the bower registry, otherwise unless the jspm registry is 100% complete, you&#39;ll just have a mess to manually maintain. The same is true if you mixed and matched <code>npm</code> with <code>bower</code>, unless the dependencies didn&#39;t cross. BTW, you still need to have a <code>package.json</code> to get <code>jspm</code> down anyways.... so you have 2 package maangers. Actually, 2 package managers and a package manager registry wrapper.</p>
</li>
<li><h2 id="automatic-module-detection-really-does-not-work">Automatic module detection really does not work</h2>
<!--more--> 
<p>So once I had everything installed via bower, I thought I&#39;d be set. However, system.js tries to detect what the module format is, but it often gets this wrong as people do incosistent module dances to adapt to various modules. E.g. a common thing is to detect AMD and register with AMD, or detect CommonJS and use that, then fallback to global. Well <code>define</code> and <code>define.amd</code> won&#39;t be there unless you specifically specify the format to be AMD, so even though alot of packages support AMD, they weren&#39;t loading as AMDs, unless I specifically set the <code>meta: { format: &quot;amd&quot; }</code></p>
</li>
<li><h2 id="modules-only-export-one-file-but-in-reality-have-many">Modules only export one file, but in reality have many</h2>
<p>A very common scenario is to get a widget that has both JavaScript and CSS components, maybe with some templates, or additional theme CSS. Bower is at fault here too, as both <code>bower.json</code> and <code>package.json</code> have a <code>main</code> that is a single string, so you only get one item to export. Additional requirements need to be added by hand. This took an hour or too to port from the <code>gruntfile</code>.</p>
</li>
<li><h2 id="semantic-version-ranges-are-not-possible">Semantic Version ranges are not possible</h2>
<p> Packages are saved to disk in the format <code>jspm_packages/&lt;registry&gt;/&lt;package&gt;@&lt;version&gt;/</code>. While you can install them with your favorite semver flags like <code>^2.1.0</code>, <code>~3.4.2</code>, etc, they will be resolved and written to disk and <code>config.js</code> with the specific version. So if you do want to take patch updates without thinking about it, too bad. Conversely, Bower supports this well.</p>
</li>
<li><h2 id="full-package-name-must-be-specified-in-meta-">Full package name must be specified in <code>meta</code></h2>
<p>Given the above points, we&#39;ll be manually editing our <code>config.js</code> alot, so it&#39;d be nice just to go </p>
<pre><code class="lang-javascript">{
  meta: {
    angular: {
      deps: [&#39;jquery&#39;]
    }
  }
}
</code></pre>
<p>as <code>angular</code> is mapped in <code>paths</code> to be whatever specific registry and version it is you chose it, but nope. It has to be the fully qualified name</p>
<pre><code class="lang-javascript">{
  meta: {
    &#39;bower:angular@1.3.2&#39;: {
      deps: [&#39;jquery&#39;]
    }
  }
}
</code></pre>
<p>and when you upgrade it, of course you get to manually update it. Don&#39;t forget or your app will break.</p>
<ol>
<li><h2 id="systemjs-builder-is-buggy-and-broken">SystemJS builder is buggy and broken</h2>
Simply trying <code>var builder = new Builder()</code> <a href="https://github.com/systemjs/builder/issues/225#issuecomment-120553357">blew up in gulp</a>, not to mention <code>baseURL</code> that worked in the browser <a href="https://github.com/systemjs/builder/issues/224#issuecomment-120551438">had to be transformed to work in both node and the browser</a>. But I still can&#39;t even <a href="https://github.com/systemjs/builder/issues/223">get paths to match properly</a> which is a blocker for me. I didn&#39;t have to do this with RequireJS on a previous project.</li>
</ol>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>With so many package managers and registries out there now, as much as I like to goals and ambitions, is just causing more confusion and hurt given the many other package management and module systems (<a href="http://requirejs.org/">RequireJS</a>, <a href="http://browserify.org/">Browserify</a>, <a href="http://webpack.github.io/">Webpack</a>, <a href="http://componentjs.com/features.html">ComponentJS</a>, <a href="http://stealjs.com/docs/StealJS.why.html">StealJS</a>). rather than working with Bower and RequireJS teams or building on their work, it <a href="https://xkcd.com/927/">forks and diverges the community</a>.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular's module system fails at tracking dependencies properly]]></title>
        <id>http://nathanblack.org/post/angular-module-system-fails-to-track-dependencies</id>
        <link href="http://nathanblack.org/post/angular-module-system-fails-to-track-dependencies">
        </link>
        <updated>2015-05-15T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://angularjs.org/">Angular</a>, being a framework with a lot of solutions to a problem, forces users to use modules - a very good thing. However, rather than letting users choose their module and package system (<a href="http://requirejs.org/">RequireJS</a> or <a href="http://browserify.org/">Browserify</a> or <a href="http://webpack.github.io/">Webpack</a> for loaders and AMD vs CommonJS vs Harmony for module formats), it brings in it&#39;s own module format, without a loader.</p>
<p>Defining a module looks like this</p>
<pre><code class="lang-javascript">var module = angular.module(&#39;fruit-stand&#39;, [&#39;raspberries&#39;, &#39;strawberries&#39;, &#39;apples&#39;])
// define what the module is or has by calling methods on it
</code></pre>
<p>it also includes a dependency injection component, because, uh, that&#39;s what they use in Java so JavaScript needs one too, because modules can&#39;t be scoped or replaced in a dynamic, interpretted language right? Nevermind. Well here&#39;s how it works:</p>
<!--more-->
<pre><code class="lang-javascript">angular.module(&#39;raspberries&#39;).constant([1, 2, 3])
angular.module(&#39;strawberries&#39;).factory(function() {
  return // anything
})

angular.module(&#39;fruit-stand&#39;, [&#39;raspberries&#39;, &#39;strawberries&#39;, &#39;apples&#39;]).controller(function(raspberries, strawberries, apples, $http, $scope) {
  // extend $scope for what your controller needs
})
</code></pre>
<p>In <code>.controller</code>, it will function scan it and see <code>raspberries</code> will match the <code>raspberries</code> module and inject what it exports. It turns out angular doesn&#39;t correlate or validate that your injections match your declared dependecies! so in a codebase I inherited, I discovered soemthing like this</p>
<pre><code class="lang-javascript">// app.js
angular.module(&#39;app&#39;, [&#39;some-common-directive&#39;, &#39;some-service&#39;, &#39;some-plugin&#39;]).config([&#39;some-common-directive&#39;, &#39;some-service&#39;, function() {

}])

// some-common-directive.js
angular.module(&#39;some-common-directive&#39;).directive(function(some-plugin) { })
</code></pre>
<p>There was some unused dependency in <code>app.js</code> (<code>some-plugin</code>) so I removed it. Turns out it broke the app because <code>some-common-directive</code> used it, but because you just throw all the scripts in the page, eventually someone else required it, so it could use it too without declaring it! Now I have no assurance that what my module declares as a depdencency is accurate at all - the main goal of a module system.</p>
<p>Compare this with the simple, straight-forward AMD, CJS, or Harmony formats:</p>
<pre><code class="lang-javascript">// AMD
define([&#39;raspberries&#39;, &#39;strawberries&#39;, &#39;apples&#39;], function(raspberries, strawberries, apples) {

})

// CJS
var raspberries = require(&#39;raspberries&#39;)

// ES6 / Harmony
import raspberries
</code></pre>
<p>What you ask for is given to you in a local variable or parameter. Didn&#39;t ask for it? it&#39;s not there. TypeError and you blow up. Not surprizing as the answer is usually to <a href="http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html">just use a function</a>.</p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Browserify string transforms: Use rfileify]]></title>
        <id>http://nathanblack.org/post/browserify-string-transforms-use-rfileify</id>
        <link href="http://nathanblack.org/post/browserify-string-transforms-use-rfileify">
        </link>
        <updated>2014-06-01T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>I started to use <a href="http://browserify.org/">browserify</a> for the first time day. It is quite slick - Just <code>npm install</code> something then <code>require</code> it up, with a lot less wiring up needed than using AMD. However adding a forced build step is not fun and I think would really be a killer on a big project.</p>
<p>So I began to look for a transform so I could include templates as I needed to bundle everything into one script. How hard can it be to basically do <code>&quot;module.exports = &quot; + JSON.stringify(fileContents)</code> ? Well after a couple hours of searching and trying 3 modules, the 4th one worked.</p>
<ul>
<li><a href="https://github.com/JohnPostlethwait/stringify">stringify</a> (no tests at all for this project)</li>
<li><a href="https://github.com/eugeneware/browserify-string">browserify-string</a> (tests but no CI)</li>
<li><a href="https://github.com/pluma/string-to-jsify">string-to-jsify</a> (test and CI but not for the console use case, the 95% one)</li>
<li><a href="https://github.com/ForbesLindesay/rfileify">rfileify</a> (tests, CI, and mentioned from <a href="https://github.com/benbria/browserify-transform-tools">browserify-transform-tools</a>)</li>
</ul>
<p>Rfileify does other transforms too, but just not the SEO rank, so hopefully I can help that.
<!--more--> </p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why node.js is Awesome, Part 2: Package and Dependency Management]]></title>
        <id>http://nathanblack.org/post/why-nodejs-is-awesome-part2-package-and-dependency-management</id>
        <link href="http://nathanblack.org/post/why-nodejs-is-awesome-part2-package-and-dependency-management">
        </link>
        <updated>2014-05-28T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>At the core of node is npm, the node package manager (which apparently <a href="https://www.npmjs.org/doc/faq.html#If-npm-is-an-acronym-why-is-it-never-capitalized">npm doesn&#39;t stand for that</a>). Having dependencies managed by a package system is huge. In Java and .NET, package managers have been added after the fact, if they are used at all. Often people end up checking in binaries that then makes the repository huge with information not pertinent to your product, which also results in binary merge conflicts. How do those get organized? A legacy codebase I work on has them scattered throughout 3 different locations, not to mention naming styles.</p>
<p>Npm standardizes this by having all the dependencies in a folder named node_modules <a href="https://www.npmjs.org/doc/faq.html#node_modules-is-the-name-of-my-deity-s-arch-rival-and-a-Forbidden-Word-in-my-religion-Can-I-configure-npm-to-use-a-different-folder">which cannot be renamed</a> and a package.json that must be comformant too, which then node understands when you <code>require</code> something. No need to set classpaths or hint paths correctly. </p>
<p>This also heavily pushes people to have all their dependies locally. Its still possible to have a global module installed and require it without declaring it in your package.json (Maybe there is a way to prevent this via static analysis?) You can end up pulling assemblies from the GAC in .NET too, but still so many packages aren&#39;t installable via NuGet (I&#39;m looking at you Azure SDK, which of course the Azure SDK for Node.js installs via npm) which means every developer and the build server(s) better have the same versions installed or someone will be wasting time getting stuff to build.</p>
<p>Dependencies are also a tree structure, not a graph. If two modules depend on the same module, they each get their own copy, so they can have their own versions. This is great given <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain">prototypical inheritance</a>. If you want to be strict about the type of object you are working with, <code>instanceof</code> will only be true if your version of the module created the object, not another version , due to the constructor functions not being a reference to the same object. If you want to be lenient, you can always duck type it.</p>
<p>Statically typed languages have a graph of dependencies, and if A and B depend on different versions of C, pain will ensue. I gave seen .NET developers waste hours tracking down mismatching versions of dependencies, even with the help of assembly binding redirects. I don&#39;t think Java has any answer for this.
<!--more--></p>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 4th aspect in JavaScript MVC frameworks]]></title>
        <id>http://nathanblack.org/post/the-4th-aspect-in-javascript-mvc-frameworks</id>
        <link href="http://nathanblack.org/post/the-4th-aspect-in-javascript-mvc-frameworks">
        </link>
        <updated>2014-04-27T00:00:00Z</updated>
        <summary type="html"><![CDATA[<p>Of the many JavaScript frameworks out there, they all have one core priciple - to structure your code in a <a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">Model-View-Whatever</a> style:</p>
<ul>
<li>Model: Your data as an object</li>
<li>Controller/ViewModel/Presenter/Whatever: the business logic of your app</li>
<li><p>View: The HTML templates for your app</p>
<p>But after using a few (Knockout, Angular, Ember, and Backbone) I&#39;ve noticed there&#39;s a forth component. It&#39;s the widgety type of logic - logic that isn&#39;t about your business, but extents the browser functionality - that cool datepicker, color picker, an awesome visualization with D3, maybe a 3D flip switch intstead of a checkbox. That stuff that is a DMZ to the DOM - Knockout&#39;s <code>bindingHandler</code>s, Angular&#39;s directives, and Handlebar helpers. They aren&#39;t about how you map your view model / controller to the DOM, but about extending the functionality of the DOM.</p>
<p>Why call this out? Well frameworks don&#39;t exactly agree on this terminology. With Knockout and Angular, the view is HTML, as they use DOM-based templating. In Ember, Backbone, and other string-based templating languages, they often refer to the view as a piece of JavaScript, and templating is separate. Really the template should be called the view in their world, and the view is this 4th aspect, the widget aspect. Knockout and Angular have their bindingHandlers / directives that extend their templating functionality, which are much more analogous to Ember/Backbone/Batman/etc views.</p>
<p>Why is this important? Keeping selector strings out of your controllers and view models is vital for the separation of concerns and tesability. Keeping this 4th aspect as the DMZ to the DOM helps to separate these concerns. Say you do have a complicated problem to solve in your app, and you come up with a cool way to visuallize it. You could put it all in one module... but now what happens when you release it and users don&#39;t like that widget and they want something more traditional? It will be harder to pull it out. Or the opposite where that widget is really awesome and you want to use it elsewhere... now lots of work to pull the business logic out. Let those two evolve independently and they grow and improve much more rapidly.</p>
<!--more-->
</li>
</ul>
]]></summary>
        <author>
            <name>Nathan Black</name>
            <uri>http://nathanblack.org/</uri>
        </author>
    </entry>
</feed>